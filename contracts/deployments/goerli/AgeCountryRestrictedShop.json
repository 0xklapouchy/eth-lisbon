{
  "address": "0x81Eb558A49A795E6147D3c86084C453f5a12A964",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Error_Age",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Error_Country",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Error_Deadline",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Error_InsufficientValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Error_InvalidLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Error_InvalidSigner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Error_Timestamp",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Error_TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "purchaser",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ItemSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isSigner",
          "type": "bool"
        }
      ],
      "name": "SingerUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buyItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCountry",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getKycData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "age",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "country",
              "type": "uint16"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            }
          ],
          "internalType": "struct Data.Kyc",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxDeadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isSinger",
          "type": "bool"
        }
      ],
      "name": "setSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x284b160170017086eedd2eb6b4c54161c1032ff81ef8f730d457843844891a70",
  "receipt": {
    "to": null,
    "from": "0x329c78010eA2F6B1F508d0ab05Fc195B2829FD5D",
    "contractAddress": "0x81Eb558A49A795E6147D3c86084C453f5a12A964",
    "transactionIndex": 93,
    "gasUsed": "1168901",
    "logsBloom": "0x
    "blockHash": "0x23299e6236d40ecfa463ee539baea98438175d9ac25546b87ce16f9fc4b256bb",
    "transactionHash": "0x284b160170017086eedd2eb6b4c54161c1032ff81ef8f730d457843844891a70",
    "logs": [
      {
        "transactionIndex": 93,
        "blockNumber": 7857479,
        "transactionHash": "0x284b160170017086eedd2eb6b4c54161c1032ff81ef8f730d457843844891a70",
        "address": "0x81Eb558A49A795E6147D3c86084C453f5a12A964",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000329c78010ea2f6b1f508d0ab05fc195b2829fd5d"
        ],
        "data": "0x",
        "logIndex": 204,
        "blockHash": "0x23299e6236d40ecfa463ee539baea98438175d9ac25546b87ce16f9fc4b256bb"
      },
      {
        "transactionIndex": 93,
        "blockNumber": 7857479,
        "transactionHash": "0x284b160170017086eedd2eb6b4c54161c1032ff81ef8f730d457843844891a70",
        "address": "0x81Eb558A49A795E6147D3c86084C453f5a12A964",
        "topics": [
          "0xc0e8f4beb7321816d8c73fe84fc3f3e15d6da5bf452d5740fa366f9b15a600f8",
          "0x000000000000000000000000329c78010ea2f6b1f508d0ab05fc195b2829fd5d"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 205,
        "blockHash": "0x23299e6236d40ecfa463ee539baea98438175d9ac25546b87ce16f9fc4b256bb"
      }
    ],
    "blockNumber": 7857479,
    "cumulativeGasUsed": "27550821",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x329c78010eA2F6B1F508d0ab05Fc195B2829FD5D"
  ],
  "solcInputHash": "d96cbd8fe6a1d97a7ad51b8458d8d231",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Error_Age\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Country\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Deadline\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_InsufficientValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_InvalidLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Timestamp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ItemSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSigner\",\"type\":\"bool\"}],\"name\":\"SingerUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCountry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKycData\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"age\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"country\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct Data.Kyc\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSinger\",\"type\":\"bool\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/kyc3-example/AgeCountryRestrictedShop.sol\":\"AgeCountryRestrictedShop\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"contracts/core/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary Data {\\n    error Error_InvalidLength();\\n\\n    struct Kyc {\\n        bytes32 id;\\n        uint8 age;\\n        uint16 country;\\n        uint32 timestamp;\\n    }\\n\\n    struct Whitelist {\\n        bytes32 id;\\n        uint32 timestamp;\\n    }\\n\\n    function unpackKyc(bytes calldata data) internal pure returns (Kyc memory) {\\n        if (data.length != 128) {\\n            revert Error_InvalidLength();\\n        }\\n\\n        return\\n            Kyc({\\n                id: bytes32(data[0:32]),\\n                age: uint8(bytes1(data[63:64])),\\n                country: uint16(bytes2(data[94:96])),\\n                timestamp: uint32(bytes4(data[124:128]))\\n            });\\n    }\\n\\n    function unpackWhitelist(bytes calldata data)\\n        internal\\n        pure\\n        returns (Whitelist memory)\\n    {\\n        if (data.length != 64) {\\n            revert Error_InvalidLength();\\n        }\\n\\n        return\\n            Whitelist({\\n                id: bytes32(data[0:32]),\\n                timestamp: uint32(bytes4(data[62:64]))\\n            });\\n    }\\n}\\n\",\"keccak256\":\"0x276c2a0e23ba8ff71ad07151cfe82044e86e18b4e7750c051d5dd51864128444\",\"license\":\"MIT\"},\"contracts/core/Data3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nabstract contract Data3 {\\n    // -----------------------------------\\n    // Library usage\\n    // -----------------------------------\\n\\n    using ECDSA for bytes32;\\n\\n    // -----------------------------------\\n    // Errors\\n    // -----------------------------------\\n\\n    error Error_InvalidSigner();\\n    error Error_Deadline();\\n\\n    // -----------------------------------\\n    // Constants\\n    // -----------------------------------\\n\\n    uint256 internal constant _MAX_DEADLINE = 10 * 60; // 10 minutes\\n\\n    // -----------------------------------\\n    // Storage variables\\n    // -----------------------------------\\n\\n    mapping(address => bool) internal _signers;\\n\\n    constructor() {\\n        _signers[0x0000000000000000000000000000000000000001] = true;\\n        _signers[0x0000000000000000000000000000000000000002] = true;\\n    }\\n\\n    // -----------------------------------\\n    // Getters\\n    // -----------------------------------\\n\\n    function getMaxDeadline() public pure returns (uint256) {\\n        return _MAX_DEADLINE;\\n    }\\n\\n    // -----------------------------------\\n    // Internal functions\\n    // -----------------------------------\\n\\n    function _getValidatedData() internal view returns (bytes calldata) {\\n        // calldata = original_calldata + attached_data + attached_data_size\\n        // + deadline + signature\\n        //\\n        // (attached_data_size * 32 bytes) + 1 bytes + 4 bytes + 65 bytes\\n\\n        uint256 signatureOffset = msg.data.length - 65;\\n        uint256 deadlineOffset = signatureOffset - 4;\\n        uint256 sizeOffset = deadlineOffset - 1;\\n\\n        uint32 deadline = uint32(\\n            bytes4(msg.data[deadlineOffset:deadlineOffset + 4])\\n        );\\n\\n        _validateDeadline(deadline);\\n\\n        uint8 size = uint8(bytes1(msg.data[sizeOffset:sizeOffset + 1]));\\n\\n        // attached_data + attached_data_size + deadline\\n        uint256 signedDataLength = uint16(size) * 32 + 1 + 4;\\n        uint256 signedDataOffset = signatureOffset - signedDataLength;\\n\\n        bytes calldata signedData = msg.data[signedDataOffset:signedDataOffset +\\n            signedDataLength];\\n        bytes calldata signature = msg.data[signatureOffset:];\\n\\n        _validateSignature(signedData, signature);\\n\\n        uint256 validatedDataLength = uint16(size) * 32;\\n        uint256 validateDataOffset = sizeOffset - validatedDataLength;\\n\\n        return\\n            msg.data[validateDataOffset:validateDataOffset +\\n                validatedDataLength];\\n    }\\n\\n    function _validateSignature(\\n        bytes calldata signedData,\\n        bytes calldata signature\\n    ) internal view {\\n        bytes32 hash = keccak256(signedData);\\n        bytes32 hashWithPrefix = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n        );\\n\\n        address signer = hashWithPrefix.recover(signature);\\n\\n        if (!_signers[signer]) {\\n            revert Error_InvalidSigner();\\n        }\\n    }\\n\\n    function _validateDeadline(uint256 deadline) internal view {\\n        if (\\n            block.timestamp > deadline ||\\n            deadline - _MAX_DEADLINE > block.timestamp\\n        ) {\\n            revert Error_Deadline();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d4d3f6f9216222cbe4fc7775a1dbf70570c87ce4e7ab9d8debf2b7f9ecffaa9\",\"license\":\"MIT\"},\"contracts/core/Kyc3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./Data.sol\\\";\\nimport \\\"./Data3.sol\\\";\\n\\ncontract Kyc3 is Data3 {\\n    function getKycData() public view returns (Data.Kyc memory) {\\n        bytes calldata data = _getValidatedData();\\n        return Data.unpackKyc(data);\\n    }\\n\\n    function getId() public view returns (bytes32) {\\n        return getKycData().id;\\n    }\\n\\n    function getAge() public view returns (uint256) {\\n        return getKycData().age;\\n    }\\n\\n    function getCountry() public view returns (uint256) {\\n        return getKycData().country;\\n    }\\n\\n    function getTimestamp() public view returns (uint256) {\\n        return getKycData().timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x11797d37b8ab1b77e0f74f94da7b2287ed9ed424b874ae2a4f8f582548cee7a7\",\"license\":\"MIT\"},\"contracts/kyc3-example/AgeCountryRestrictedShop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../core/Kyc3.sol\\\";\\n\\ncontract AgeCountryRestrictedShop is Ownable, Kyc3 {\\n    error Error_Age();\\n    error Error_Country();\\n    error Error_Timestamp();\\n    error Error_InsufficientValue();\\n    error Error_TransferFailed();\\n\\n    event ItemSold(address indexed purchaser, uint256 amount);\\n    event SingerUpdated(address indexed signer, bool isSigner);\\n\\n    uint256 public constant PRICE = 0.01 ether;\\n    address public beneficiary;\\n\\n    constructor(address signer) {\\n        _signers[signer] = true;\\n        emit SingerUpdated(signer, true);\\n    }\\n\\n    modifier onlyAdultAndFromPortugal() {\\n        _validateKyc();\\n        _;\\n    }\\n\\n    function buyItem(uint256 amount) external payable onlyAdultAndFromPortugal {\\n        if (msg.value < amount * PRICE) {\\n            revert Error_InsufficientValue();\\n        }\\n\\n        emit ItemSold(msg.sender, amount);\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        (bool success, ) = msg.sender.call{ value: address(this).balance }(\\\"\\\");\\n        if (!success) revert Error_TransferFailed();\\n    }\\n\\n    function setSigner(address signer, bool isSinger) external onlyOwner {\\n        _signers[signer] = isSinger;\\n        emit SingerUpdated(signer, isSinger);\\n    }\\n\\n    function _validateKyc() private view {\\n        Data.Kyc memory kyc = getKycData();\\n\\n        if (kyc.age < 18) {\\n            revert Error_Age();\\n        }\\n\\n        uint256 numberOneCountryToHack = 1;\\n\\n        if (kyc.country != numberOneCountryToHack) {\\n            revert Error_Country();\\n        }\\n\\n        if (block.timestamp > kyc.timestamp + 1 days) {\\n            revert Error_Timestamp();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09107a5409bbb84903afcac8ef0bcffd1e718411f6219fdb0403b7fb86b99348\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161140938038061140983398101604081905261002f9161013c565b610038336100ec565b600160208181527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f805460ff1990811684179091557fd9d16d34ffb15ba3a3d852f0d403e2ce1d691fb54de27ac87cd2f993f3ec330f80548216841790556001600160a01b0384166000818152604090819020805490931685179092559051928352917fc0e8f4beb7321816d8c73fe84fc3f3e15d6da5bf452d5740fa366f9b15a600f8910160405180910390a25061016c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561014e57600080fd5b81516001600160a01b038116811461016557600080fd5b9392505050565b61128e8061017b6000396000f3fe6080604052600436106100dd5760003560e01c80638d859f3e1161007f578063967e6e6511610059578063967e6e651461026d5780639e0c3ead14610282578063e7fb74c714610297578063f2fde38b146102aa57600080fd5b80638d859f3e146101d25780638da5cb5b146101ed578063919f980f1461021857600080fd5b80633ccfd60b116100bb5780633ccfd60b1461017e5780635d1ca631146101935780636bd64c3a146101a8578063715018a6146101bd57600080fd5b8063188ec356146100e257806331cb61051461010a57806338af3eed1461012c575b600080fd5b3480156100ee57600080fd5b506100f76102ca565b6040519081526020015b60405180910390f35b34801561011657600080fd5b5061012a610125366004610f5e565b6102e3565b005b34801561013857600080fd5b506002546101599073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610101565b34801561018a57600080fd5b5061012a610375565b34801561019f57600080fd5b506100f7610402565b3480156101b457600080fd5b506102586100f7565b3480156101c957600080fd5b5061012a610412565b3480156101de57600080fd5b506100f7662386f26fc1000081565b3480156101f957600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610159565b34801561022457600080fd5b5061022d610426565b60405161010191908151815260208083015160ff169082015260408083015161ffff169082015260609182015163ffffffff169181019190915260800190565b34801561027957600080fd5b506100f761046a565b34801561028e57600080fd5b506100f7610480565b61012a6102a5366004610f9a565b610497565b3480156102b657600080fd5b5061012a6102c5366004610fb3565b610521565b60006102d4610426565b6060015163ffffffff16905090565b6102eb6105da565b73ffffffffffffffffffffffffffffffffffffffff821660008181526001602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915591519182527fc0e8f4beb7321816d8c73fe84fc3f3e15d6da5bf452d5740fa366f9b15a600f8910160405180910390a25050565b61037d6105da565b604051600090339047908381818185875af1925050503d80600081146103bf576040519150601f19603f3d011682016040523d82523d6000602084013e6103c4565b606091505b50509050806103ff576040517f650926a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b600061040c610426565b51919050565b61041a6105da565b610424600061065b565b565b6040805160808101825260008082526020820181905291810182905260608101919091523660006104556106d0565b91509150610463828261082a565b9250505090565b6000610474610426565b6020015160ff16905090565b600061048a610426565b6040015161ffff16905090565b61049f610913565b6104b0662386f26fc1000082611004565b3410156104e9576040517f90bdf79500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405181815233907fc8edef1fc414675e55c5a6ea7d9d6547df463b23dbdfc36ecaad361408c0894c9060200160405180910390a250565b6105296105da565b73ffffffffffffffffffffffffffffffffffffffff81166105d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6103ff8161065b565b60005473ffffffffffffffffffffffffffffffffffffffff163314610424576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105c8565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b366000806106df604184611041565b905060006106ee600483611041565b905060006106fd600183611041565b9050600080833661070f826004611058565b9261071c93929190611070565b6107259161109a565b60e01c9050610733816109fa565b6000808336610743826001611058565b9261075093929190611070565b610759916110e2565b60f81c9050600061076b826020611128565b610776906001611152565b610781906004611152565b61ffff16905060006107938288611041565b90503660008083836107a58783611058565b926107b293929190611070565b90925090503660006107c6828c8184611070565b915091506107d684848484610a49565b60006107e660ff89166020611128565b61ffff16905060006107f8828c611041565b9050600081366108088583611058565b9261081593929190611070565b9e509e50505050505050505050505050509091565b60408051608081018252600080825260208201819052918101829052606081019190915260808214610888576040517ffe68f10700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160808101909152806108a2602060008688611070565b6108ab91611178565b81526020016108be6040603f8688611070565b6108c7916110e2565b60f81c81526020016108dd6060605e8688611070565b6108e6916111b4565b60f01c81526020016108fc6080607c8688611070565b6109059161109a565b60e01c905290505b92915050565b600061091d610426565b90506012816020015160ff161015610961576040517f1fa58a9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604081015160019061ffff1681146109a5576040517f88cd5e0e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60608201516109b790620151806111fa565b63ffffffff164211156109f6576040517f2d3de50100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b80421180610a12575042610a1061025883611041565b115b156103ff576040517f1d5e332f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008484604051610a5b929190611219565b6040519081900381207f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020830152603c82018190529150600090605c016040516020818303038152906040528051906020012090506000610af585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508693925050610b609050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604090205490915060ff16610b57576040517fec265eb800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050565b6000806000610b6f8585610b84565b91509150610b7c81610bc9565b509392505050565b6000808251604103610bba5760208301516040840151606085015160001a610bae87828585610e1d565b94509450505050610bc2565b506000905060025b9250929050565b6000816004811115610bdd57610bdd611229565b03610be55750565b6001816004811115610bf957610bf9611229565b03610c60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016105c8565b6002816004811115610c7457610c74611229565b03610cdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016105c8565b6003816004811115610cef57610cef611229565b03610d7c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016105c8565b6004816004811115610d9057610d90611229565b036103ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016105c8565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610e545750600090506003610f2c565b8460ff16601b14158015610e6c57508460ff16601c14155b15610e7d5750600090506004610f2c565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610ed1573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116610f2557600060019250925050610f2c565b9150600090505b94509492505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610f5957600080fd5b919050565b60008060408385031215610f7157600080fd5b610f7a83610f35565b915060208301358015158114610f8f57600080fd5b809150509250929050565b600060208284031215610fac57600080fd5b5035919050565b600060208284031215610fc557600080fd5b610fce82610f35565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561103c5761103c610fd5565b500290565b60008282101561105357611053610fd5565b500390565b6000821982111561106b5761106b610fd5565b500190565b6000808585111561108057600080fd5b8386111561108d57600080fd5b5050820193919092039150565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156110da5780818660040360031b1b83161692505b505092915050565b7fff0000000000000000000000000000000000000000000000000000000000000081358181169160018510156110da5760019490940360031b84901b1690921692915050565b600061ffff8083168185168183048111821515161561114957611149610fd5565b02949350505050565b600061ffff80831681851680830382111561116f5761116f610fd5565b01949350505050565b8035602083101561090d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b7fffff00000000000000000000000000000000000000000000000000000000000081358181169160028510156110da5760029490940360031b84901b1690921692915050565b600063ffffffff80831681851680830382111561116f5761116f610fd5565b8183823760009101908152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220b21f45fd72d0bdb02cee86972fc4adf95af356efc5f39da4591507f4286c6cea64736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c80638d859f3e1161007f578063967e6e6511610059578063967e6e651461026d5780639e0c3ead14610282578063e7fb74c714610297578063f2fde38b146102aa57600080fd5b80638d859f3e146101d25780638da5cb5b146101ed578063919f980f1461021857600080fd5b80633ccfd60b116100bb5780633ccfd60b1461017e5780635d1ca631146101935780636bd64c3a146101a8578063715018a6146101bd57600080fd5b8063188ec356146100e257806331cb61051461010a57806338af3eed1461012c575b600080fd5b3480156100ee57600080fd5b506100f76102ca565b6040519081526020015b60405180910390f35b34801561011657600080fd5b5061012a610125366004610f5e565b6102e3565b005b34801561013857600080fd5b506002546101599073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610101565b34801561018a57600080fd5b5061012a610375565b34801561019f57600080fd5b506100f7610402565b3480156101b457600080fd5b506102586100f7565b3480156101c957600080fd5b5061012a610412565b3480156101de57600080fd5b506100f7662386f26fc1000081565b3480156101f957600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610159565b34801561022457600080fd5b5061022d610426565b60405161010191908151815260208083015160ff169082015260408083015161ffff169082015260609182015163ffffffff169181019190915260800190565b34801561027957600080fd5b506100f761046a565b34801561028e57600080fd5b506100f7610480565b61012a6102a5366004610f9a565b610497565b3480156102b657600080fd5b5061012a6102c5366004610fb3565b610521565b60006102d4610426565b6060015163ffffffff16905090565b6102eb6105da565b73ffffffffffffffffffffffffffffffffffffffff821660008181526001602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915591519182527fc0e8f4beb7321816d8c73fe84fc3f3e15d6da5bf452d5740fa366f9b15a600f8910160405180910390a25050565b61037d6105da565b604051600090339047908381818185875af1925050503d80600081146103bf576040519150601f19603f3d011682016040523d82523d6000602084013e6103c4565b606091505b50509050806103ff576040517f650926a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b600061040c610426565b51919050565b61041a6105da565b610424600061065b565b565b6040805160808101825260008082526020820181905291810182905260608101919091523660006104556106d0565b91509150610463828261082a565b9250505090565b6000610474610426565b6020015160ff16905090565b600061048a610426565b6040015161ffff16905090565b61049f610913565b6104b0662386f26fc1000082611004565b3410156104e9576040517f90bdf79500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405181815233907fc8edef1fc414675e55c5a6ea7d9d6547df463b23dbdfc36ecaad361408c0894c9060200160405180910390a250565b6105296105da565b73ffffffffffffffffffffffffffffffffffffffff81166105d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6103ff8161065b565b60005473ffffffffffffffffffffffffffffffffffffffff163314610424576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105c8565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b366000806106df604184611041565b905060006106ee600483611041565b905060006106fd600183611041565b9050600080833661070f826004611058565b9261071c93929190611070565b6107259161109a565b60e01c9050610733816109fa565b6000808336610743826001611058565b9261075093929190611070565b610759916110e2565b60f81c9050600061076b826020611128565b610776906001611152565b610781906004611152565b61ffff16905060006107938288611041565b90503660008083836107a58783611058565b926107b293929190611070565b90925090503660006107c6828c8184611070565b915091506107d684848484610a49565b60006107e660ff89166020611128565b61ffff16905060006107f8828c611041565b9050600081366108088583611058565b9261081593929190611070565b9e509e50505050505050505050505050509091565b60408051608081018252600080825260208201819052918101829052606081019190915260808214610888576040517ffe68f10700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160808101909152806108a2602060008688611070565b6108ab91611178565b81526020016108be6040603f8688611070565b6108c7916110e2565b60f81c81526020016108dd6060605e8688611070565b6108e6916111b4565b60f01c81526020016108fc6080607c8688611070565b6109059161109a565b60e01c905290505b92915050565b600061091d610426565b90506012816020015160ff161015610961576040517f1fa58a9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604081015160019061ffff1681146109a5576040517f88cd5e0e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60608201516109b790620151806111fa565b63ffffffff164211156109f6576040517f2d3de50100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b80421180610a12575042610a1061025883611041565b115b156103ff576040517f1d5e332f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008484604051610a5b929190611219565b6040519081900381207f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020830152603c82018190529150600090605c016040516020818303038152906040528051906020012090506000610af585858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508693925050610b609050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602052604090205490915060ff16610b57576040517fec265eb800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050565b6000806000610b6f8585610b84565b91509150610b7c81610bc9565b509392505050565b6000808251604103610bba5760208301516040840151606085015160001a610bae87828585610e1d565b94509450505050610bc2565b506000905060025b9250929050565b6000816004811115610bdd57610bdd611229565b03610be55750565b6001816004811115610bf957610bf9611229565b03610c60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016105c8565b6002816004811115610c7457610c74611229565b03610cdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016105c8565b6003816004811115610cef57610cef611229565b03610d7c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016105c8565b6004816004811115610d9057610d90611229565b036103ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016105c8565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610e545750600090506003610f2c565b8460ff16601b14158015610e6c57508460ff16601c14155b15610e7d5750600090506004610f2c565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610ed1573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116610f2557600060019250925050610f2c565b9150600090505b94509492505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610f5957600080fd5b919050565b60008060408385031215610f7157600080fd5b610f7a83610f35565b915060208301358015158114610f8f57600080fd5b809150509250929050565b600060208284031215610fac57600080fd5b5035919050565b600060208284031215610fc557600080fd5b610fce82610f35565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561103c5761103c610fd5565b500290565b60008282101561105357611053610fd5565b500390565b6000821982111561106b5761106b610fd5565b500190565b6000808585111561108057600080fd5b8386111561108d57600080fd5b5050820193919092039150565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156110da5780818660040360031b1b83161692505b505092915050565b7fff0000000000000000000000000000000000000000000000000000000000000081358181169160018510156110da5760019490940360031b84901b1690921692915050565b600061ffff8083168185168183048111821515161561114957611149610fd5565b02949350505050565b600061ffff80831681851680830382111561116f5761116f610fd5565b01949350505050565b8035602083101561090d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b7fffff00000000000000000000000000000000000000000000000000000000000081358181169160028510156110da5760029490940360031b84901b1690921692915050565b600063ffffffff80831681851680830382111561116f5761116f610fd5565b8183823760009101908152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220b21f45fd72d0bdb02cee86972fc4adf95af356efc5f39da4591507f4286c6cea64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/kyc3-example/AgeCountryRestrictedShop.sol:AgeCountryRestrictedShop",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 882,
        "contract": "contracts/kyc3-example/AgeCountryRestrictedShop.sol:AgeCountryRestrictedShop",
        "label": "_signers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3067,
        "contract": "contracts/kyc3-example/AgeCountryRestrictedShop.sol:AgeCountryRestrictedShop",
        "label": "beneficiary",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}